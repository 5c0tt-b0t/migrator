#!/sbin/sh -x
# App Data Keeper (adk) Installer
# Copyright (C) 2018, VR25 @ xda-developers
# License: GPL v3+

# detect whether in bootmode
getprop | grep zygote | grep -q running && bootMode=true || bootMode=false

# default perms
umask 022

ui_print() {
  $bootMode && echo -e "$1" || echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

is_mounted() { mountpoint -q "$1" 2>/dev/null; }

mount_image() {
  ui_print "- Mounting $1 to $2"
  [ -d "$2" ] || mkdir -p "$2"
  if ! is_mounted $2; then
    for n in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        loopDevice=/dev/block/loop$n
        [ -b "$loopDevice" ] || mknod $loopDevice b 7 $n 2>/dev/null
        losetup $loopDevice $1
        [ "$?" -eq "0" ] && mount -t ext4 -o loop $loopDevice $2
        is_mounted $2 && break
      fi
    done
  fi
  if ! is_mounted $2; then
    ui_print " "
    ui_print "(!) Failed to mount $IMG"
    ui_print " "
    exit 1
  fi
}

set_perm() {
  chown $2:$3 "$1" || exit 1
  chmod $4 "$1" || exit 1
  [ -z "$5" ] && chcon 'u:object_r:system_file:s0' "$1" || chcon $5 "$1"
}

set_perm_recursive() {
  find "$1" -type d 2>/dev/null | while read dir; do
  set_perm "$dir" $2 $3 $4 $6
  done
  find "$1" -type f -o -type l 2>/dev/null | while read file; do
  set_perm "$file" $2 $3 $5 $6
  done
}

request_size_check() {
  reqSizeM=`du -s $1 | cut -f1`
  reqSizeM=$((reqSizeM / 1024 + 1))
}

request_zip_size_check() {
  reqSizeM=`unzip -l "$1" | tail -n 1 | awk '{ print int($1 / 1048567 + 1) }'`
}

image_size_check() {
  e2fsck -yf $1 >&2
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

mod_info() {
  grep_prop "$1" $INSTALLER/module.prop
}

print_modname() {
  ui_print " "
  ui_print "$(mod_info name) ($(mod_info id)) $(mod_info version)"
  ui_print "$(mod_info author)"
  ui_print "Powered by Magisk (@topjohnwu)"
  ui_print " "
}

set_permissions() {
  # Only some special files require specific permissions
  # The default permissions should be good enough for most cases

  # Here are some examples for the set_perm functions:

  # set_perm_recursive  <dirname>                <owner> <group> <dirpermission> <filepermission> <contexts> (default: u:object_r:system_file:s0)
  # set_perm_recursive  $modPath/system/lib       0       0       0755            0644

  # set_perm  <filename>                         <owner> <group> <permission> <contexts> (default: u:object_r:system_file:s0)
  # set_perm  $modPath/system/bin/app_process32   0       2000    0755         u:object_r:zygote_exec:s0
  # set_perm  $modPath/system/bin/dex2oat         0       2000    0755         u:object_r:dex2oat_exec:s0
  # set_perm  $modPath/system/lib/libart.so       0       0       0644

  # The following are default permissions, DO NOT remove
  set_perm_recursive  $tmpModPath  0  0  0755  0644

  for f in $tmpModPath/bin/* \
    $(find $tmpModPath -type f -name $modID) \
    $(find $tmpModPath -type f -name *.sh)
  do
    [ -f "$f" ] && set_perm $f 0 0 0755
  done
}

OUTFD=$2
ZIP="$3"

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0
  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
mountPath=$TMPDIR/magisk_img
magiskBin=/data/adb/magisk/magisk
$bootMode && imgName=magisk_merge.img || imgName=magisk.img
[ -d /data/adb/magisk ] && IMG=/data/adb/$imgName || IMG=/data/$imgName

if [ ! -d /data/adb/magisk ] && [ ! -d /data/magisk ]; then
  ui_print " "
  ui_print "(!) No Magisk installation found or installed version is not supported"
  ui_print " "
  exit 1
fi

# initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER 2>/dev/null

unzip -o "$ZIP" 'common/*' module.prop -d $INSTALLER >&2

modID="`grep_prop id $INSTALLER/module.prop`"
tmpModPath=$mountPath/$modID
modPath=$tmpModPath

# find modPath
if $bootMode; then
  for mountPoint in /sbin/.core/img /magisk; do
    if [ -d "$mountPoint/.core" ] || [ -d "$mountPoint/lost+found" ]; then
      mountPoint=$mountPoint
      modPath=$mountPoint/$modID
      break
    fi
  done
  is_mounted $mountPoint && mkdir -p $modPath 2>/dev/null \
    || { echo -e "\n(!) $IMG mount point not found\n"; exit 1; }
fi

# Print mod name
print_modname

$bootMode || ui_print "- Mounting partitions"
{ mount -o ro /system
mount -o ro /vendor
mount /data
mount /cache; } 2>/dev/null

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- $IMG detected!"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${SIZE}M..."
    $magiskBin imgtool resize $IMG $SIZE >&2 \
      || $magiskBin --resizeimg $IMG $SIZE >&2 \
        || resize2fs $IMG ${SIZE}M >&2
  fi
else
  SIZE=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${SIZE}M"
  $magiskBin imgtool create $IMG $SIZE >&2 \
    || $magiskBin --createimg $IMG $SIZE >&2 \
      || make_ext4fs -l ${SIZE}M $IMG >&2
fi

mount_image $IMG $mountPath

##########################################################################################
# module-specific code
##########################################################################################

modData=/data/media/$modID
config=$modData/config.txt
modInfo=$modData/info
postFsD="$(echo $modPath | sed "s/$modID//").core/post-fs-data.d"

# detect CPU architecture
case "$(uname -m)" in
  *86*) binArch=x86;;
  *ar*) binArch=arm;;
esac

# cleanup obsolete data
[ "$(grep_prop versionCode $modPath/module.prop)" -lt "201807300" ] \
  && rm $modInfo/Change* 2>/dev/null

[ "$(grep_prop versionCode $modPath/module.prop)" -lt "201808141" ] \
  && rm -rf $modData/logs 2>/dev/null

# create module paths
{ rm -rf $tmpModPath
mkdir -p $tmpModPath/bin $modInfo "$postFsD"; } 2>/dev/null

# extract module files
ui_print "- Extracting module files"
unzip -o "$ZIP" -d $INSTALLER >&2
cd $INSTALLER
mv bin/rsync_$binArch $tmpModPath/bin/rsync
mv common/* $tmpModPath/
mv -f $tmpModPath/${modID}.sh "$postFsD"/
set_perm "$postFsD/${modID}.sh" 0 0 755
[[ ! -d /system/xbin && ! -d /system_root/system/xbin ]] \
  && mv $tmpModPath/system/xbin $tmpModPath/system/bin
mv -f License.md README.md $modInfo/

# uninstaller
mv -f $tmpModPath/$modID $modData/rollback
set_perm $modData/rollback 0 0 755
$bootMode || ls -s $modData/rollback /sbin/

# auto-mount
touch $tmpModPath/auto_mount

# default config
[ -e "$config" ] && rm $tmpModPath/config.txt \
  || mv $tmpModPath/config.txt $config

##########################################################################################

# module info
cp $INSTALLER/module.prop $tmpModPath/

# update info for Magisk Manager
if $bootMode; then
  touch $modPath/update
  cp $INSTALLER/module.prop $modPath/
fi

ui_print "- Setting permissions"
set_permissions

$bootMode || ui_print "- Unmounting partitions"
umount $mountPath
losetup -d $loopDevice
rmdir $mountPath

# shrink the image if possible
image_size_check $IMG
NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M..."
  $magiskBin imgtool resize $IMG $SIZE >&2 \
    || $magiskBin --resizeimg $IMG $SIZE >&2 \
      || resize2fs $IMG ${SIZE}M >&2
fi

if ! $bootMode; then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- End"
ui_print " "

##########################################################################################
# module-specific code
##########################################################################################

ui_print "  Facebook Support Page: https://facebook.com"
ui_print "    /VR25-at-xda-developers-258150974794782/"
ui_print " "

ui_print "  WHAT'S NEW"
ui_print "    adk -r removes all uninstalled APK's from backup folder"
ui_print "    cp uninstaller (rollback) to /data/media/adk"
ui_print "    Default config.txt includes a set up tutorial"
ui_print "    Fixed \"duplicate/orphan APK's in backup folder\""
ui_print "    Misc optimizations"
ui_print "    More advanced and user-friendly APK restore wizard"
ui_print "    New and blazing fast batch APK restore algorithm"
ui_print "    Set SELinux mode to \"permissive\" (compatibility)"
ui_print "    Updated documentation (please [re]read it)"
ui_print "    "

grep -q '16\.7' /data/adb/magisk/util_functions.sh 2>/dev/null \
  && ui_print "  *Note*: a Magisk 16.7 bug causes $modID to" \
  && ui_print "    generate empty verbose logs (\"set -x\" is broken)" \
  && ui_print " "

##########################################################################################

exit 0
