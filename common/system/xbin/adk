#!/system/bin/sh
# App Data Keeper (adk) wizard
# Copyright (C) 2018, VR25 @ xda-developers
# License: GPL v3+


# shell behavior
set -o errexit # set -e
set -o nounset # set -u
set -o pipefail
#set -o xtrace # set -x
#IFS=$'\n\t' # new line & tab
umask 000 # default perms (d=rwx-rwx-rwx, f=rw-rw-rw)

modId=adk
modData=/data/media/$modId
Config=$modData/config.txt
logsDir=$modData/logs
logFile=$logsDir/wizard.log
oldLog=$logFile.old

# prepend Magisk's busybox to PATH
PATH=/sbin/.core/busybox:$PATH

# log engine
mkdir -p $logsDir
[ -f "$logFile" ] && mv $logFile $oldLog
set +u
[ -n "$EPOCHREALTIME" ] && PS4='[$EPOCHREALTIME] '
set -u
set -o xtrace 2>>$logFile # set -x

# exit trap (debugging tool)
debug_exit() {
  echo -e "\n***EXIT $?***\n"
  set +euxo pipefail
  getprop | grep -Ei 'product|version'
  echo
  set
  echo
  echo "SELinux status: $(getenforce 2>/dev/null || sestatus 2>/dev/null)" \
    | sed 's/En/en/;s/Pe/pe/'
} 1>>$logFile 2>&1
trap debug_exit EXIT

# find modPath
modPath=$(sed -n 's/^.*MOUNTPATH=//p' /data/adb/magisk/util_functions.sh)/$modId
[ -f $modPath/module.prop ] || { echo -e "\n(!) modPath not found\n"; exit 1; }

source $modPath/core.sh # load core


# Remove all backups of uninstalled apps
rm_uninstalled() {
  local Pkg=""
  bkps_path
  if ls -p $appDataBkps 2>/dev/null | grep -q /; then
    mk_list not_installed
    if grep -q '[a-z]' $tmpDir/pkg_list0; then
      regex_prompt
      if grep -q '[a-z]' $tmpDir/pkg_list; then
        echo -e "\n(i) Removing..."
        for Pkg in $(cat $tmpDir/pkg_list); do
          echo "- $Pkg"
          [ -f "$apkBkps/$Pkg" ] && rm "$apkBkps/$Pkg"
          [ -d "$appDataBkps/$Pkg" ] && rm -rf "$appDataBkps/$Pkg"
        done
        echo
      else
        no_matches rm_uninstalled
      fi
    else
      echo -e "(i) Nothing to remove\n"
    fi
    exit_or_not
  else
    missing_bkp
  fi
}


# generic incremental backup utility
rsync_util() {
  local a=""
  echo "(i) Use \$i for internal storage and \$e for external media (largest partition), instead of writing full paths. Example: rsync -hrtuv --inplace --progress --stats --del \$i/ \$e/full_internal_bkp".
  echo -n "\nrsync -hrtuv --inplace --progress --stats "
  read a
  echo
  while :; do
    eval $rsync -hrtuv --inplace --progress --stats $a
    echo
    echo "(i) Next incremental backup in $bkpFreq hours"
    echo "- Press CTRL+C (Vol. Down + C) to cancel the schedule and exit."
    echo -n "- You may minimize this window."
    sleep $((bkpFreq * 3600))
    echo
    echo
  done
}


restore_apps() {
  local Pkg=""
  bkps_path
  if ls $apkBkps 2>/dev/null | grep -q .apk; then
    : >$tmpDir/pkg_list0
    for Pkg in $(ls -1 $apkBkps); do
      echo "- $Pkg"
      echo $Pkg >>$tmpDir/pkg_list0
    done
    regex_prompt
    if grep -q '[a-z]' $tmpDir/pkg_list; then
      echo -e "\n[Re]installing..."
      Pkg=""
      for Pkg in $(cat $tmpDir/pkg_list); do
        echo -n "- $Pkg"
        if grep -q "${Pkg%.apk}" "$pkgList"; then
          pm install -r "$apkBkps/$Pkg" 1>/dev/null || true
        else
          pm install "$apkBkps/$Pkg" 1>/dev/null || true
        fi
        echo
      done
      post_restore apps apps
    else
      no_matches restore_apps
    fi
  else
    missing_bkp
  fi
}


restore_data() {
  bkps_path
  if ls -p $appDataBkps 2>/dev/null | grep -q /; then
    mk_list installed
    regex_prompt
    if grep -q '[a-z]' $tmpDir/pkg_list; then
      restore data data
    else
      no_matches restore_data
    fi
  else
    missing_bkp
  fi
}


restore_apps_and_data() {
  local o="" Pkg=""
  bkps_path
  if ls $appDataBkps 2>/dev/null | grep -q .; then
    echo -n "Filter out already installed apps? (Y/n) "
    read o
    reset
    echo
    echo $o | grep -iq n && mk_list all \
      || mk_list not_installed
    if ! grep -q '[a-z]' $tmpDir/pkg_list0; then
      echo -e "(i) Nothing left to restore\n"
      o=""
      select o in Exit "Main menu" \
        "Restore apps (replace)" \
        "Restore apps data (overwrite)"
      do
        case $o in
          Exit) echo; exit 0;;
          "Main menu") wizard; break;;
          "Restore apps (replace)") reset; echo; restore_apps; break;;
          "Restore apps data (overwrite)") reset; echo; restore_data; break;;
        esac
      done
    fi
    set -u
    regex_prompt
    if grep -q '[a-z]' $tmpDir/pkg_list; then
      restore apps+data apps_and_data
    else
      no_matches restore_apps_and_data
    fi
  else
    missing_bkp
  fi
}


wizard() {
  local o=""
  find_sdcard nowait
  reset
  cat <<ACTIONS

App Data Keeper (adk) Wizard

Restore
  1) Apps (replace)
  2) Data (overwrite)
  3) Apps+data
Utilities
  4) Test backupd()
  5) Debugging info
  6) rsync -hrtuv --inplace --progress --stats \$@
  7) Remove select backups of uninstalled apps
---
  0) Exit

ACTIONS

  echo -n "(i) Choose an option... "
  read o

  case $o in
    0) echo -e "\n  Goodbye.\n"; exit 0;;
    1) reset; echo; restore_apps;;
    2) reset; echo; restore_data;;
    3) reset; echo; restore_apps_and_data;;
    4) reset; echo; backupd ondemand;;
    5) reset; echo; debug_info;;
    6) reset; echo; rsync_util;;
    7) reset; echo; rm_uninstalled;;
    *) echo; echo -n "  (!) Invalid choice!"; sleep 2; wizard;;
  esac
}


debug_info() {
  getprop | grep -Ei 'product|version'
  echo
  set
  echo
  echo "SELinux status: $(getenforce 2>/dev/null || sestatus 2>/dev/null)" \
    | sed 's/En/en/;s/Pe/pe/'
  echo
  exit_or_not
}


no_matches() {
  local o=""
  echo -e "\n(!) No match(es)!\n"
  select o in Exit Retry "Main menu"; do
    case $o in
      Exit) echo; exit 0;;
      Retry) reset; $1; break;;
      "Main menu") wizard; break;;
    esac
  done
}


missing_bkp() {
    echo -e "\n(!) Backup folder not found or empty!\n"
    exit_or_not
}


post_restore() {
  local o=""
  echo
  echo "Done. Now what?"
  select o in Exit "Main menu" "Restore more $1"; do
    case $o in
      Exit) echo; exit 0;;
      "Main menu") wizard; break;;
      "Restore more $1") reset; restore_$2; break;;
    esac
  done
}


regex_prompt() {
  local i=""
  : >$tmpDir/pkg_list
  echo
  echo -n "(i) Input pattern(s) to match (i.e., sp.*fy or duk|faceb|whats. A dot matches all)... "
  read i
  [ -n "$i" ] && cat $tmpDir/pkg_list0 | grep -E "$i" 2>/dev/null >$tmpDir/pkg_list || true
}


mk_list() {
  local Pkg="" Test=""
  : >$tmpDir/pkg_list0
  for Pkg in $(find $appDataBkps -type d -maxdepth 1 \
    | sed "s:$appDataBkps::; s:/::")
  do
    case "$1" in
      not_installed) grep -q "$Pkg" "$pkgList" && Test=false || Test=true;;
      installed) grep -q "$Pkg" "$pkgList" && Test=true || Test=false;;
      all) Test=true;;
    esac
    if $Test; then
      echo "- $Pkg"
      echo $Pkg >>$tmpDir/pkg_list0
    fi
  done
}


restore() {
  local Pkg="" o=""
  echo -e "\nRestoring $1..."
  for Pkg in $(cat $tmpDir/pkg_list); do
    echo -n "- $Pkg"
    if [ "$1" = "apps+data" ]; then
      if grep -q "$Pkg" "$pkgList"; then
        pm install -r "$apkBkps/$Pkg.apk" 1>/dev/null || true
      else
        pm install "$apkBkps/$Pkg.apk" 1>/dev/null || true
      fi
    fi
    pm disable "$Pkg" 1>/dev/null || true
    $rsync -Drt --del "$appDataBkps/$Pkg/" /data/data/$Pkg
    echo
    restore_symlinks $appDataBkps/$Pkg.lns
    o=$(grep "$Pkg" "$pkgList" | awk '{print $2}')
    chown -R $o:$o /data/data/$Pkg 2>/dev/null || true
    chmod -R 771 /data/data/$Pkg 2>/dev/null || true
    pm enable "$Pkg" 1>/dev/null
  done
  post_restore $1 $2
}


exit_or_not() {
  local o=""
  select o in Exit "Main menu"; do
    case $o in
      Exit) echo; exit 0;;
      "Main menu") wizard; break;;
     esac
  done
}


bkps_path() {
  local o="" bkpsDir=${apkBkps%/*}
  echo -e "Backups location...\n"
  select o in "$bkpsDir/ (default)" "$bkpsDir.old/" "<custom>" \
    "Return to main menu" Exit
  do
    case $o in
      "$bkpsDir.old/") bkpsDir=$bkpsDir.old;;
      "<custom>") echo -n "Custom path: "; read bkpsDir;;
      "Return to main menu") wizard;;
      Exit) echo; exit 0;;
    esac
    if [ -d $bkpsDir/apk -a -d $bkpsDir/appdata ]; then
      apkBkps=$bkpsDir/apk
      appDataBkps=$bkpsDir/appdata
    else
      echo -e "\n(!) Empty/invalid location! \n"
      bkps_path # recurse
    fi
    break
  done
  reset
  echo
}


wizard
